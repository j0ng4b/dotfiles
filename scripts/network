#!/usr/bin/env sh

# Cache
cache_dir=$SCRIPT_CACHE_DIR

cache_dir_wifi=$cache_dir/wifi
cache_wifi_interface=$cache_dir_wifi/interface
cache_wifi_power=$cache_dir_wifi/power
cache_wifi_signal_level=$cache_dir_wifi/signal_level

cache_dir_bluetooth=$cache_dir/bluetooth
cache_bluetooth_power=$cache_dir_bluetooth/power

if [ -z "$cache_dir" ]; then
    exit 1
elif [ ! -d "$cache_dir" ]; then
    mkdir -p $cache_dir
    mkdir -p $cache_dir_wifi
    mkdir -p $cache_dir_bluetooth

    # Bluetooth
    touch $cache_bluetooth_power

    # WiFi
    touch $cache_wifi_signal_level
    touch $cache_wifi_power
    interface=$(find /sys/class/net -name "wlan*" -or -name "wl*" | head -n1 | cut -d'/' -f5)
    if [ -n "$interface" ]; then
        echo $interface > $cache_wifi_interface
    fi

    for i in $(seq 1 5); do
        echo -50 >> $cache_wifi_signal_level
    done
fi


_net_check_connection() {
    for url in google.com duckduckgo.com wikipedia.org; do
        ping -c 1 $url 1>/dev/null
        if [ $? -eq 0 ]; then
            return 1
        fi
    done

    return 0
}

_net_get_info() {
    type=$1
    if [ "$type" = "wifi" ]; then
        interfaces=$(cat $cache_wifi_interface)
    elif [ "$type" = "ethernet" ]; then
        interfaces=$(find /sys/class/net -name "en*" -or -name "eth*")
    fi

    connected=0
    for net in $interfaces; do
        carrier=$(cat /sys/class/net/$net/carrier 2>/dev/null)
        operstate=$(cat /sys/class/net/$net/operstate)

        if [ -n "$carrier" ]; then
            connected=$carrier
        elif [ "$operstate" = "up" ]; then
            # Maybe this isn't needed, if interface is up carrier will never be
            # empty
            connected=1
        elif [ "$operstate" = "down" ]; then
            # This is when the interface is "soft" down, i.e., using ip link, in
            # this case the carrier will be empty
            connected=0
        elif [ "$operstate" = "unknown" ]; then
            # Maybe this isn't needed too, if interface operational state is
            # unknown carrier also will never be empty
            connected=$carrier
        fi

        # Stop at any connected interface
        if [ "$connected" = 1 ]; then
            break
        fi
    done

    # Immediately return if disconnected
    if [ "$connected" = 0 ]; then
        echo "{ \"enable\": \"$connected\", \"state\": \"unknown\" }"
        return
    fi

    # Get interface name
    interface="$(cat $cache_wifi_interface)"

    # Get connection quality
    if [ "$type" = "wifi" ]; then
        if command -v iwctl >/dev/null 2>&1; then
            # Get WiFi name from iwd
            iwctl_output="$(iwctl station $interface show)"

            name="$(echo "$iwctl_output" | sed '1,6d;8,$d;s/.*network\s*//;s/\s*$//')"
        elif command -v wpa_cli >/dev/null 2>&1; then
            # Get WiFi name from wpa_supplicant
            name=$(wpa_cli status | tr '\n' ';' | cut -d';' -f4 | cut -d'=' -f2)
        else
            name=""
        fi

        _net_check_connection
        if [ $? -gt 0 ]; then
            if command -v iwctl >/dev/null 2>&1; then
                # Get WiFi quality from iwd
                signal_level="$(echo "$iwctl_output" | sed '1,13d;15,$d;s/.*\(-[0-9]*\).*/\1/
')"
            elif command -v wpa_cli >/dev/null 2>&1; then
                # Get WiFi signal_level from wpa_supplicant
                signal_level=$(wpa_cli signal_poll | tr '\n' ';' | cut -d';' -f8 | cut -d'=' -f2)
            else
                # Get WiFi signal_level from Linux
                signal_level=$(cat /proc/net/wireless | sed -ne 's/.*\(-[0-9]\{2,4\}\)\..*/\1/p')
            fi

            # Update WiFi signal level file
            sed -ie '1d' "$cache_wifi_signal_level"
            echo "$signal_level" >> $cache_wifi_signal_level

            # Calculate average WiFi signal level
            sum=0
            count=0
            for value in $(cat $cache_wifi_signal_level); do
                sum=$(($sum + $value))
                count=$(( $count + 1 ))
            done
            signal_level=$(( $sum / $count ))
            state='connected'
        else
            state="noconnection"
        fi
    elif [ "$type" = "ethernet" ]; then
        _net_check_connection
        if [ $? -gt 0 ]; then
            state="unkown"
        else
            state="noconnection"
        fi
    fi

    printf '{'
    printf '"enable": %s, ' $connected
    printf '"state": "%s", ' $state
    printf '"signal_level": %d' $signal_level
    if [ -n "$name" ]; then
        printf ', '
        printf '"name": "%s"' "$name"
    fi
    printf '}\n'
}

_net_wifi_enabled() {
    cmd="$1"

    # Get interface name
    interface=$(cat $cache_wifi_interface)

    if command -v iwctl >/dev/null 2>&1; then
        iwctl device $interface set-property Powered $cmd
    elif command -v wpa_cli >/dev/null 2>&1; then
        error "Not available to wpa_supplicant!"
        exit 1
    else
        error "Not available without some WiFi manager!"
        exit 1
    fi

    echo $cmd > $cache_wifi_power
}

_net_wifi_list() {
    # Create temporary files for network details
    temp_file=$(mktemp)

    # Get interface name
    interface=$(cat $cache_wifi_interface)

    if command -v iwctl >/dev/null 2>&1; then
        # Scan for networks first
        iwctl station "$interface" scan >/dev/null
        sleep 1

        # Get the list of saved networks
        saved_networks="|$(iwctl known-networks list \
            | sed -e '1,4d' -e 's/\x1b\[[0-9;]*m//g' -e 's/^[ \t]*//g' -e 's/[ ]\{3,\}.*$//' \
            | tr '\n' '|')"

        # Get network list
        network_list=$(iwctl station "$interface" get-networks \
            | sed -e '1,4d' -e 's/\x1b\[[0-9;]*m//g' \
            | tr '\n' ';')

        if [ "$network_list" = "No networks available" ]; then
            echo "[]"
            rm "$temp_file"
            return
        fi

        IFS=';'
        for network in $network_list; do
            [ -z "$network" ] && continue

            # Extract signal strength symbol (typically in column 3)
            strength=$(echo "$network" | tr -s ' ' | sed -e 's/^[ \t>]*//' -e 's/^>* *//' | cut -d' ' -f3)

            # Skip lines that don't have proper network info
            [ -z "$strength" ] && continue

            signal_level="-100"
            case "$strength" in
                "****") signal_level="-50" ;;
                "***") signal_level="-60" ;;
                "**") signal_level="-75" ;;
                "*") signal_level="-85" ;;
            esac

            # Check if network is current
            current='false'
            if echo "$network" | grep -q '[ \t]>[ \t]'; then
                current='true'
            fi

            # Extract SSID
            ssid=$(echo "$network" | sed -e 's/^[ \t>]*//' -e 's/[ ]\{3,\}.*$//')
            [ -z "$ssid" ] && continue

            # Extract security type
            security='open'
            case $network in
                *'   psk   '*) security='wpa' ;;
                *'   8021x   '*) security='wep' ;;
            esac

            # Check if network is saved
            saved='false'
            if str_contains "$saved_networks" "|$ssid|"; then
                saved='true'
            fi

            # Store all the information with the signal level as the first
            # field for sorting
            echo "$signal_level|$ssid|$current|$security|$saved" >> "$temp_file"
        done
    elif command -v wpa_cli >/dev/null 2>&1; then
        error "wpa_supplicant back-end not full implemented"
        exit 1

        [ "$(wpa_cli scan | tail -n 1)" = "OK" ] && sleep 0.5

        raw_network_list=$(wpa_cli scan_results)
        network_list=$(echo "$raw_network_list" | sed -ne '2,$s/.*\(-[0-9]*\)\s\+\[.*\]\s\+\(.*\)/\1:\2/p' | sort | tr '\n' ';')

        IFS=';'
        for network in $network_list; do
            signal_level=$(echo $network | cut -d':' -f1)

            ssid=$(echo $network | cut -d':' -f2)
            [ -z "$ssid" ] && continue

            # TODO: extract if is current network connected
            # TODO: extract security level

            echo "$signal_level|$ssid|$current|$security" >> "$temp_file"
        done
    fi

    # Sort the networks by signal level (numerically)
    # The "-n" option is for numeric sort, "-r" for reverse order (strongest signal first)
    sorted_networks=$(sort -n -r "$temp_file")
    rm "$temp_file"

    # Output the sorted networks as JSON
    comma=false
    printf "["
    echo "$sorted_networks" | while IFS= read -r line; do
        [ -z "$line" ] && continue

        # Parse the line to extract all fields
        signal_level=$(echo "$line" | cut -d'|' -f1)
        ssid=$(echo "$line" | cut -d'|' -f2)
        current=$(echo "$line" | cut -d'|' -f3)
        security=$(echo "$line" | cut -d'|' -f4)
        saved=$(echo "$line" | cut -d'|' -f5)

        [ $comma = "true" ] && printf ','
        printf "{"
        printf "\"ssid\": \"%s\", " "$ssid"
        printf "\"current\": %s, " "$current"
        printf "\"saved\": %s, " "$saved"
        printf "\"security\": \"%s\", " "$security"
        printf "\"signal_level\": %d" "$signal_level"
        printf "}"

        comma=true
    done
    printf "]"
}

_net_wifi_disconnect() {
    # Get interface name
    interface=$(cat $cache_wifi_interface)

    if command -v iwctl >/dev/null 2>&1; then
        iwctl station "$interface" disconnect >/dev/null
    elif command -v wpa_cli >/dev/null 2>&1; then
        # List of previous connected WiFis
        networks_saved=$(wpa_cli list_networks | sed -ne '2,$s/\(^[0-9]*\)\s\+\(.*\)\s\+any\(\s\+\[\(.*\)\].*\|.*$\)/\1:\2:\4/p' | tr '\n' ';')

        IFS=';'
        for network in $networks_saved; do
            id=$(echo $network | cut -d':' -f1)
            status=$(echo $network | cut -d':' -f3)

            if [ "$status" = "CURRENT" ]; then
                wpa_cli set_network $id priority 0 1>/dev/null
                wpa_cli disconnect 1>/dev/null

                break
            fi
        done
    fi
}

_net_wifi_connect() {
    if command -v iwctl >/dev/null 2>&1; then
        error "iwctl back-end not implemented"
    elif command -v wpa_cli >/dev/null 2>&1; then
        # On Eww the space on ssid name is converted to `~` to properly pass the
        # ssid name to this script, convert back to space.
        network_to_connect_ssid=$(echo "$1" | tr '~' ' ')
        network_to_connect_password=$2

        # List of previous connected WiFis
        networks_saved=$(wpa_cli list_networks | sed -ne '2,$s/\(^[0-9]*\)\s\+\(.*\)\s\+any\(\s\+\[\(.*\)\].*\|.*$\)/\1:\2:\4/p' | tr '\n' ';')

        if str_contains "$networks_saved" ":$network_to_connect_ssid:"; then
            connect_to=""

            IFS=';'
            for network in $networks_saved; do
                id=$(echo $network | cut -d':' -f1)
                ssid=$(echo $network | cut -d':' -f2)
                status=$(echo $network | cut -d':' -f3)

                if [ "$status" = "CURRENT" ]; then
                    # If already connected exit
                    if [ "$ssid" = "$network_to_connect_ssid" ]; then
                        exit 0
                    else
                        wpa_cli set_network $id priority 0 1>/dev/null
                        wpa_cli disconnect 1>/dev/null

                        break
                    fi
                fi

                # This skip the next for loop if possible, if ssid to connect is
                # found here save its id.
                if [ "$ssid" = "$network_to_connect_ssid" ]; then
                    connect_to="$id"
                fi
            done

            # If the network to connect is already found connect and exit
            if [ -n "$connect_to" ]; then
                wpa_cli set_network $connect_to priority 10 1>/dev/null
                wpa_cli reconnect 1>/dev/null

                exit 0
            fi

            # Connect to network
            IFS=';'
            for network in $networks_saved; do
                id=$(echo $network | cut -d':' -f1)
                ssid=$(echo $network | cut -d':' -f2)

                if [ "$ssid" = "$network_to_connect_ssid" ]; then
                    wpa_cli set_network $id priority 10 1>/dev/null
                    wpa_cli reconnect 1>/dev/null

                    break
                fi
            done
        else
            # When eww call this script no password is give at first but when its a
            # new connection the password must be provided!
            #
            # Open password pop-up to recall this script with the password passed.
            if [ -z "$network_to_connect_password" ]; then
                exit 1
            fi

            _net_wifi_disconnect

            # Create a new network
            network_id=$(wpa_cli add_network | tail -n 1)

            # Configure the new network
            wpa_cli set_network $network_id ssid \"$network_to_connect_ssid\" 1>/dev/null
            wpa_cli set_network $network_id psk \"$network_to_connect_password\" 1>/dev/null
            wpa_cli set_network $network_id priority 10 1>/dev/null

            # Enable and connect to new network
            wpa_cli enable_network $network_id 1>/dev/null
            wpa_cli reconnect 1>/dev/null

            # Save configuration
            wpa_cli save_config 1>/dev/null
        fi
    fi
}

_bl_get_info() {
    info=$(bluetoothctl show)

    if [ "$(echo $info | sed -ne 's/.*Powered: \([a-z]\{2,3\}\).*/\1/p')" = "yes" ]; then
        enable=1

        if [ -n "$(bluetoothctl devices Connected)" ]; then
            status="connected"
        else
            status="disconnected"
        fi

        echo "on" > $cache_bluetooth_power
    else
        enable=0
        status="unknown"

        echo "off" > $cache_bluetooth_power
    fi

    echo "{ \"enable\": \"$enable\", \"status\": \"$status\"}"
}


case $1 in
    wifi)
        case $2 in
            status)
                _net_get_info wifi
                ;;

            on | off | toggle)
                cmd=$2
                if [ "$cmd" = "toggle" ]; then
                    enable=$(cat $cache_wifi_power)
                    if [ "$enable" = "off" ]; then
                        cmd="on"
                    else
                        cmd="off"
                    fi
                fi

                _net_wifi_enabled $cmd
                ;;

            list)
                echo "$(_net_wifi_list)"
                ;;

            connect)
                _net_wifi_connect "$3" "$4"
                ;;

            disconnect)
                _net_wifi_disconnect
                ;;

            interface)
                case $3 in
                    list)
                        # List all interfaces
                        interfaces=$(find /sys/class/net -name "wlan*" -or -name "wl*" -exec basename {} \;)
                        if [ -z "$interfaces" ]; then
                            error "No WiFi interfaces found"
                            exit 1
                        fi

                        printf '['
                        comma=false
                        for interface in $interfaces; do
                            if [ $comma = "true" ]; then
                                printf ','
                            fi
                            printf "\"$interface\""
                            comma=true
                        done
                        printf ']'
                        ;;

                    get)
                        # Get interface name
                        echo $(cat $cache_wifi_interface)
                        ;;

                    set)
                        if [ -z "$4" ]; then
                            error "No interface name provided"
                            exit 1
                        fi

                        if [ "$4" = "$(cat $cache_wifi_interface)" ]; then
                            exit 0
                        fi

                        # Check if interface exists
                        if [ ! -d "/sys/class/net/$4" ]; then
                            error "Interface $4 not found"
                            exit 1
                        fi

                        # Set interface name
                        echo "$4" > $cache_wifi_interface

                        # Enable the interface
                        interfaces=$(find /sys/class/net -name "wlan*" -or -name "wl*" -exec basename {} \;)
                        for interface in $interfaces; do
                            if [ "$interface" = "$4" ]; then
                                # Enable selected interface
                                iwctl device $interface set-property Powered on
                            else
                                # Disable other interfaces
                                iwctl device $interface set-property Powered off
                            fi
                        done
                        ;;
                esac
        esac
        ;;

    ethernet)
        case $2 in
            status)
                _net_get_info ethernet
                ;;
        esac
        ;;

    bluetooth)
        case $2 in
            status)
                _bl_get_info
                ;;

            on | off | toggle)
                cmd=$2
                if [ "$cmd" = "toggle" ]; then
                    enable=$(cat $cache_bluetooth_power)
                    if [ "$enable" = "off" ]; then
                        cmd="on"
                    else
                        cmd="off"
                    fi
                fi

                bluetoothctl power $cmd >/dev/null
                echo $cmd > $cache_bluetooth_power
                ;;
        esac
        ;;
esac

