#!/usr/bin/env sh

# Cache
cache_dir=$SCRIPT_CACHE_DIR
cache_last_notify_id=$cache_dir/last_notify_id
cache_last_notify_time=$cache_dir/last_notify_time

if [ ! -d "$cache_dir" ]; then
    mkdir -p "$cache_dir"

    echo 0 > $cache_last_notify_id
    echo 0 > $cache_last_notify_time
fi


_battery_capacity_icon() {
    case "$(($capacity / 10))" in
        10 | 9)     echo '' ;;
         8 | 7)     echo '' ;;
         6 | 5 | 4) echo '' ;;
         3 | 2)     echo '' ;;
         *)         echo '' ;;
    esac
}

_notify() {
    # Battery status
    current_status=$(cat "$status_file")

    # Low battery levels and timeouts
    level_low=10
    level_critical=5

    level_low_timeout=3000
    level_critical_timeout=1000

    # When the battery goes less than or equal this value send a notification.
    notify_level="$level_low"
    notify_timeout="$level_low_timeout"

    notify() {
        appname="scripter-battery"

        urgency=$1
        icon=$2
        title=$3

        body=$4
        [ -n "$body" ] && body="\n$body"

        timeout="$level_low_timeout"
        [ "$urgency" = "critical" ] && timeout="$notify_timeout"


        msg=""
        msg="$msg<span font_desc='Phosphor-Fill' size='15pt' baseline_shift='-2pt'>$icon</span>"
        msg="$msg <b><span size='14pt'>$title</span></b>"
        msg="$msg<span size='12pt'>$body</span>"


        # Load generated colors
        # Note: tmux colors format are shell format
        . "$XDG_CONFIG_HOME/tmux/colors.tmux"

        for color_name in base00 base01 base02 base03 base04 base05 base06 base07 base08 base09 base0A base0B base0C base0D base0E base0F; do
            msg="$(eval "echo \"$msg\" | sed -e "s/{$color_name}/\${$color_name}/"")"
        done

        time=$(cat $cache_last_notify_time)
        if [ $(( $(date +%s) - $time )) -gt $(( $timeout / 1000 )) ]; then
            id=$(notify-send -p -a "$appname" -u $urgency -t $timeout "battery" "$msg")
            echo $id > $cache_last_notify_id
        else
            id=$(cat $cache_last_notify_id)
            notify-send -r $id -a "$appname" -u $urgency -t $timeout "battery" "$msg"
        fi

        echo $(date +%s) > $cache_last_notify_time
    }


    # Don't run notifier if already running
    pid_file="/tmp/battery_notifier.pid"

    if [ -e "$pid_file" ] && kill -0 $(cat "$pid_file") 2>/dev/null; then
        warn "Battery notifier already running!"
        exit 1
    fi


    (
        while true; do
            # Get new battery status and current capacity
            new_status=$(cat "$status_file")
            capacity=$(cat "$capacity_file")


            # Notify low battery
            if [ "$current_status" = "Discharging" -a "$capacity" -le "$notify_level" ]; then
                notify critical \
                    "<span color='{base0A}'></span>" \
                    "Low Battery" \
                    "<span color='{base08}'>$capacity%</span>"

                # Update the battery level threshold
                notify_level="$level_critical"
                notify_timeout="$level_critical_timeout"
            fi


            if [ "$new_status" = "$current_status" ]; then
                sleep 1
                continue
            fi


            # When the battery get fully charged
            if [ "$new_status" = "Full" -o "$new_status" = "Not charging" ]; then
                # From Discharging to Full
                # When: charger was connected when battery is already full.
                if [ "$current_status" = "Discharging" ]; then
                    notify normal \
                        "span color='{base0B}'></span>" \
                        "Charging Full Battery"
                # From Charging to Full
                # When: battery was charging then get full capacity.
                else
                    notify normal \
                        "<span color='{base0B}'></span>" \
                        "Full Battery"
                fi
            # Notify when charger is connected
            elif [ "$new_status" = "Charging"  ]; then
                notify normal \
                    "<span color='{base0C}'></span>" \
                    "Charging Battery"
            # Notify when charger is disconnected
            elif [ "$new_status" = "Discharging" ]; then
                notify normal \
                    "<span color='{base0C}'>$(_battery_capacity_icon)</span>" \
                    "Charger disconnected" \
                    "<span color='{base0C}'>$capacity%</span>"

                # Reset notification of low battery
                if [ "$capacity" -ge "$level_low" ]; then
                    notify_level="$level_low"
                    notify_timeout="$level_low_timeout"
                fi
            # Any invalid status is ignored
            else
                sleep 1
                continue
            fi

            # Update the current battery status
            current_status="$new_status"

            sleep 0.5
        done
    ) &

    echo $! > "$pid_file"
}

main() {
    batteries=$(find /sys/class/power_supply/ -name "BAT*")
    if [ $(echo $batteries | wc -l) -gt 0 ]; then
        enable=1

        for bat in $batteries; do
            capacity_file="$bat/capacity"
            status_file="$bat/status"

            break
        done
    else
        enable=0
    fi

    case $1 in
        status)
            if [ $enable -eq 1 ]; then
                status=$(cat "$status_file" | sed -e 's/.*/\L&/')
                capacity=$(cat "$capacity_file")
            else
                warn 'No battery!'
                exit 1
            fi

            echo "{ \"enable\": \"$enable\", \"capacity\": \"$capacity\", \"status\": \"$status\" }"
            ;;

        notify)
            if [ $enable -eq 1 ]; then
                _notify
            else
                warn 'No battery!'
                exit 1
            fi
            ;;
    esac
}

main "$@"

